// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

contract Project {
    struct Proposal {
        uint256 id;
        string title;
        string description;
        uint256 voteCount;
        uint256 creationTime;
        uint256 votingDeadline;
        bool executed;
        address proposer;
    }

    struct Voter {
        bool isRegistered;
        bool hasVoted;
        uint256 votedProposalId;
        uint256 registrationTime;
    }

    address public admin;
    uint256 public proposalCount;
    uint256 public registeredVoters;
    uint256 public constant VOTING_DURATION = 7 days;

    mapping(uint256 => Proposal) public proposals;
    mapping(address => Voter) public voters;
    mapping(uint256 => mapping(address => bool)) public hasVotedOnProposal;

    event VoterRegistered(address indexed voter, uint256 timestamp);
    event ProposalCreated(uint256 indexed proposalId, string title, address indexed proposer, uint256 deadline);
    event VoteCast(address indexed voter, uint256 indexed proposalId, uint256 timestamp);
    event ProposalExecuted(uint256 indexed proposalId, uint256 finalVoteCount);

    modifier onlyAdmin() {
        require(msg.sender == admin, "Only admin can perform this action");
        _;
    }

    modifier onlyRegisteredVoter() {
        require(voters[msg.sender].isRegistered, "You must be registered to vote");
        _;
    }

    modifier proposalExists(uint256 _proposalId) {
        require(_proposalId > 0 && _proposalId <= proposalCount, "Proposal does not exist");
        _;
    }

    modifier votingActive(uint256 _proposalId) {
        require(block.timestamp <= proposals[_proposalId].votingDeadline, "Voting period has ended");
        require(!proposals[_proposalId].executed, "Proposal already executed");
        _;
    }

    constructor() {
        admin = msg.sender;
    }

    // Core Function 1: Register a single voter
    function registerVoter(address _voter) external onlyAdmin {
        require(_voter != address(0), "Invalid voter address");
        require(!voters[_voter].isRegistered, "Voter already registered");

        voters[_voter] = Voter(true, false, 0, block.timestamp);
        registeredVoters++;
        emit VoterRegistered(_voter, block.timestamp);
    }

    // Core Function 2: Create a proposal
    function createProposal(string memory _title, string memory _description) external onlyRegisteredVoter {
        require(bytes(_title).length > 0, "Title cannot be empty");
        require(bytes(_description).length > 0, "Description cannot be empty");

        proposalCount++;
        uint256 deadline = block.timestamp + VOTING_DURATION;

        proposals[proposalCount] = Proposal({
            id: proposalCount,
            title: _title,
            description: _description,
            voteCount: 0,
            creationTime: block.timestamp,
            votingDeadline: deadline,
            executed: false,
            proposer: msg.sender
        });

        emit ProposalCreated(proposalCount, _title, msg.sender, deadline);
    }

    // Core Function 3: Vote on a proposal
    function vote(uint256 _proposalId)
        external
        onlyRegisteredVoter
        proposalExists(_proposalId)
        votingActive(_proposalId)
    {
        require(!hasVotedOnProposal[_proposalId][msg.sender], "Already voted on this proposal");

        proposals[_proposalId].voteCount++;
        hasVotedOnProposal[_proposalId][msg.sender] = true;

        if (!voters[msg.sender].hasVoted) {
            voters[msg.sender].hasVoted = true;
            voters[msg.sender].votedProposalId = _proposalId;
        }

        emit VoteCast(msg.sender, _proposalId, block.timestamp);
    }

    // Finalize a proposal after voting ends
    function executeProposal(uint256 _proposalId) external proposalExists(_proposalId) {
        Proposal storage proposal = proposals[_proposalId];
        require(block.timestamp > proposal.votingDeadline, "Voting period is still active");
        require(!proposal.executed, "Proposal already executed");

        proposal.executed = true;

        emit ProposalExecuted(_proposalId, proposal.voteCount);
    }

    // Admin utility: Batch voter registration
    function batchRegisterVoters(address[] memory _voters) external onlyAdmin {
        for (uint256 i = 0; i < _voters.length; i++) {
            address voter = _voters[i];
            if (!voters[voter].isRegistered && voter != address(0)) {
                voters[voter] = Voter(true, false, 0, block.timestamp);
                registeredVoters++;
                emit VoterRegistered(voter, block.timestamp);
            }
        }
    }

    // Internal View: Total votes
    function _getTotalVotes() internal view returns (uint256) {
        uint256 total = 0;
        for (uint256 i = 1; i <= proposalCount; i++) {
            total += proposals[i].voteCount;
        }
        return total;
    }

    // External View Functions

    function getProposal(uint256 _proposalId)
        external
        view
        proposalExists(_proposalId)
        returns (
            uint256 id,
            string memory title,
            string memory description,
            uint256 voteCount,
            uint256 creationTime,
            uint256 votingDeadline,
            bool executed,
            address proposer
        )
    {
        Proposal memory p = proposals[_proposalId];
        return (p.id, p.title, p.description, p.voteCount, p.creationTime, p.votingDeadline, p.executed, p.proposer);
    }

    function getVoterInfo(address _voter)
        external
        view
        returns (
            bool isRegistered,
            bool hasVoted,
            uint256 votedProposalId,
            uint256 registrationTime
        )
    {
        Voter memory v = voters[_voter];
        return (v.isRegistered, v.hasVoted, v.votedProposalId, v.registrationTime);
    }

    function isVotingActive(uint256 _proposalId)
        external
        view
        proposalExists(_proposalId)
        returns (bool)
    {
        Proposal memory p = proposals[_proposalId];
        return block.timestamp <= p.votingDeadline && !p.executed;
    }

    function getActiveProposals() external view returns (uint256[] memory) {
        uint256[] memory activeIds = new uint256[](proposalCount);
        uint256 count = 0;

        for (uint256 i = 1; i <= proposalCount; i++) {
            if (block.timestamp <= proposals[i].votingDeadline && !proposals[i].executed) {
                activeIds[count++] = i;
            }
        }

        uint256[] memory result = new uint256[](count);
        for (uint256 j = 0; j < count; j++) {
            result[j] = activeIds[j];
        }

        return result;
    }

    function getTotalVotes() external view returns (uint256) {
        return _getTotalVotes();
    }

    function transferAdmin(address _newAdmin) external onlyAdmin {
        require(_newAdmin != address(0), "Invalid new admin");
        admin = _newAdmin;
    }

    function getContractStats()
        external
        view
        returns (
            uint256 totalProposals,
            uint256 totalRegisteredVoters,
            uint256 totalVotesCast,
            address currentAdmin
        )
    {
        return (
            proposalCount,
            registeredVoters,
            _getTotalVotes(),
            admin
        );
    }
}
